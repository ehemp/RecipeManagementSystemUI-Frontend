@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject UserStateService _userStateService
@inject AuthService _authService
@using Models
@using Newtonsoft.Json

@if (_authService.Authenticated)
{
    @ChildContent
}

@code {
    public bool IsAuthenticated { get; set; }
    private bool isAuthenticated { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback Refresh { get; set; }

    private bool _isRendered = false;


    protected override async Task OnInitializedAsync()
    {
        _authService.OnAuthStateChanged += RefreshLayout;
        //Console.WriteLine($"AuthGuard about to refresh? {DateTime.Now}");
        isAuthenticated = await IsUserAuthenticatedAsync();
        if (!isAuthenticated || !_userStateService.TokenPresent)
        {
            Console.WriteLine($"AuthGuard Navigate to /login isAuthenticated? {isAuthenticated}");
            Navigation.NavigateTo("/login");
        }
        else if (isAuthenticated && _userStateService.TokenPresent)
        {
            //_authService.NotifyAuthStateChanged();
            Navigation.NavigateTo(Navigation.Uri, forceLoad: false);
        }
    }

    private async Task<bool> IsUserAuthenticatedAsync()
    {

        IsAuthenticated = await _authService.GetUserAsync();
        //Console.WriteLine($"IsAuthenticated: {IsAuthenticated}");
        return await Task.FromResult(IsAuthenticated);
    }

    private async void RefreshLayout()
    {
        StateHasChanged();
        await Refresh.InvokeAsync();

        Console.WriteLine($"AuthGuard refreshed at: {DateTime.Now} _authService.Authenticated: {_authService.Authenticated}");
    }

    public void Dispose()
    {
        _authService.OnAuthStateChanged -= RefreshLayout;

    }
}


