@page "/login"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject UserStateService UserStateService
@inject AuthService _authService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using Newtonsoft.Json
@using Models
@using Component


<h3 class="bb-4">Login</h3>

<div class="card p-4 shadow border-0" style="max-width: 400px; margin: auto; margin-top: 50px; border-radius: 15px;">
    <div class="card-body">
        <h5 class="card-title text-center mb-4" style="font-weight: bold; color: #343a40;">Welcome Back</h5>
        <div class="mb-3">
            <label for="username" class="form-label" style="font-weight: 500; color: #6c757d;">Username</label>
            <input id="username" class="form-control form-control-lg rounded-pill" placeholder="Enter your username" @bind="Username" />
        </div>

        <div class="mb-3">
            <label for="password" class="form-label" style="font-weight: 500; color: #6c757d;">Password</label>
            <input id="password" type="password" class="form-control form-control-lg rounded-pill" placeholder="Enter your password" @bind="Password" />
        </div>

        <button class="btn btn-dark w-100 rounded-pill py-2" @onclick="HandleLogin" style="font-size: 1rem;">Login</button>

        <div class="text-center mt-3">
            <a href="#" class="text-decoration-none" style="color: #6c757d;">Forgot Password?</a>
        </div>
    </div>
</div>


@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="validation-message">@ErrorMessage</p>
}
else if (!string.IsNullOrEmpty(SuccessMessage))
{
    <p style="color: green;">@SuccessMessage</p>
}

@code {
    
    private string Username { get; set; }
    private string Password { get; set; }
    private string ErrorMessage { get; set; }
    private string SuccessMessage { get; set; }
    private bool authenticated { get; set; }


    private async Task HandleLogin()
    {
        var loginData = new { Username, Password };
        AuthGuard authGuard = new();
        Console.WriteLine($"User Login: {Username}");
        authenticated = await _authService.LoginAsync(Username, Password);
        try
        {
            Console.WriteLine($"Login Page bool: {authenticated}");
            if (authenticated)
            {
                SuccessMessage = "Success!";
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                ErrorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred during request: {ex.Message}";
        }
    }

    private class LoginResponse
    {
        public string Token { get; set; }
        public object User { get; set; }
        public DateTime Expires { get; set; }
    }

}
